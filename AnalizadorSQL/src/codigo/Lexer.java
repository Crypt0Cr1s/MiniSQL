/* The following code was generated by JFlex 1.4.3 on 18/8/19 13:54 */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18/8/19 13:54 from the specification file
 * <tt>/home/cristobal/Documentos/MiniSQL/AnalizadorSQL/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\56\1\16\2\0\1\16\22\0\1\56\1\53\1\15\2\0"+
    "\1\52\1\55\1\0\1\61\1\62\1\50\1\17\1\56\1\17\1\20"+
    "\1\47\12\1\1\0\1\52\1\53\1\54\1\53\2\0\1\22\1\35"+
    "\1\30\1\23\1\21\1\45\1\40\1\31\1\33\1\65\1\36\1\14"+
    "\1\42\1\12\1\32\1\37\1\65\1\25\1\27\1\24\1\13\1\43"+
    "\1\41\1\46\1\26\1\34\1\57\1\0\1\60\1\0\1\44\1\0"+
    "\1\7\3\65\1\5\1\6\5\65\1\10\5\65\1\3\1\11\1\2"+
    "\1\4\5\65\1\63\1\51\1\64\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\3\1\1\1\4\2\5\5\3"+
    "\1\5\1\1\1\5\1\1\3\5\1\6\3\3\2\0"+
    "\10\3\1\7\21\3\1\7\1\10\2\0\3\3\1\11"+
    "\42\3\1\10\1\12\1\0\1\6\1\0\1\13\2\3"+
    "\1\7\33\3\1\0\23\3\1\0\14\3\1\7\6\3"+
    "\1\7\10\3\1\7\2\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\66\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\330"+
    "\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u057c\0\u0ca8"+
    "\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u0efa\0\u0798\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368\0\66\0\u139e\0\u13d4\0\u140a\0\u140a\0\330\0\u1440"+
    "\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0"+
    "\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950"+
    "\0\u14ac\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca"+
    "\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a"+
    "\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a"+
    "\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda"+
    "\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a"+
    "\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a"+
    "\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea"+
    "\0\u2520";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\3\5\1\6\3\5\1\7\2\5"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\4\5"+
    "\1\17\4\5\1\20\6\5\1\2\2\5\1\21\1\13"+
    "\1\22\1\13\2\23\1\24\1\11\1\25\1\13\1\26"+
    "\1\13\1\27\1\13\1\5\67\0\1\3\16\0\1\30"+
    "\46\0\2\5\1\31\11\5\4\0\26\5\16\0\1\5"+
    "\1\0\14\5\4\0\26\5\16\0\1\5\1\0\6\5"+
    "\1\32\5\5\4\0\26\5\16\0\1\5\1\0\12\5"+
    "\1\33\1\5\4\0\26\5\16\0\1\5\16\34\1\0"+
    "\47\34\16\0\1\11\37\0\1\11\10\0\1\35\65\0"+
    "\11\5\1\36\1\5\1\37\4\0\4\5\1\40\1\5"+
    "\1\41\16\5\1\42\16\0\1\5\1\0\11\5\1\43"+
    "\1\44\1\45\4\0\2\5\1\36\3\5\1\46\17\5"+
    "\16\0\1\5\1\0\12\5\1\47\1\5\4\0\1\50"+
    "\1\51\2\5\1\52\4\5\1\53\1\54\1\5\1\55"+
    "\11\5\16\0\1\5\1\0\12\5\1\56\1\57\4\0"+
    "\1\5\1\60\2\5\1\61\3\5\1\62\1\63\14\5"+
    "\16\0\1\5\1\0\12\5\1\64\1\5\4\0\1\65"+
    "\1\66\2\5\1\67\1\70\20\5\16\0\1\5\47\0"+
    "\1\71\1\72\66\0\1\13\70\0\1\13\66\0\1\13"+
    "\70\0\1\13\67\0\1\13\67\0\1\13\2\0\1\30"+
    "\3\0\1\73\13\0\1\73\45\0\3\5\1\74\10\5"+
    "\4\0\26\5\16\0\1\5\1\0\7\5\1\75\4\5"+
    "\4\0\26\5\16\0\1\5\1\0\13\5\1\76\4\0"+
    "\26\5\16\0\1\5\15\34\1\77\1\0\47\34\1\0"+
    "\1\35\16\0\1\30\46\0\14\5\4\0\2\5\1\70"+
    "\23\5\16\0\1\5\1\0\14\5\4\0\6\5\1\100"+
    "\17\5\16\0\1\5\1\0\14\5\4\0\4\5\1\101"+
    "\21\5\16\0\1\5\1\0\14\5\4\0\7\5\1\102"+
    "\16\5\16\0\1\5\1\0\14\5\4\0\1\103\6\5"+
    "\1\104\2\5\1\105\13\5\16\0\1\5\1\0\14\5"+
    "\4\0\2\5\1\70\2\5\1\70\20\5\16\0\1\5"+
    "\1\0\14\5\4\0\3\5\1\106\22\5\16\0\1\5"+
    "\1\0\13\5\1\70\4\0\3\5\1\107\22\5\16\0"+
    "\1\5\1\0\14\5\4\0\7\5\1\70\16\5\16\0"+
    "\1\5\1\0\14\5\4\0\21\5\1\110\4\5\16\0"+
    "\1\5\1\0\11\5\1\111\1\5\1\112\4\0\1\5"+
    "\1\113\4\5\1\114\1\115\14\5\1\116\1\5\16\0"+
    "\1\5\1\0\14\5\4\0\3\5\1\117\22\5\16\0"+
    "\1\5\1\0\14\5\4\0\11\5\1\110\14\5\16\0"+
    "\1\5\1\0\12\5\1\120\1\5\4\0\26\5\16\0"+
    "\1\5\1\0\14\5\4\0\6\5\1\121\17\5\16\0"+
    "\1\5\1\0\14\5\4\0\7\5\1\114\16\5\16\0"+
    "\1\5\1\0\14\5\4\0\4\5\1\122\21\5\16\0"+
    "\1\5\1\0\12\5\1\123\1\5\4\0\11\5\1\37"+
    "\14\5\16\0\1\5\1\0\14\5\4\0\6\5\1\124"+
    "\17\5\16\0\1\5\1\0\14\5\4\0\1\125\10\5"+
    "\1\126\14\5\16\0\1\5\1\0\14\5\4\0\1\127"+
    "\25\5\16\0\1\5\1\0\11\5\1\130\1\5\1\131"+
    "\4\0\1\5\1\132\17\5\1\133\4\5\16\0\1\5"+
    "\1\0\13\5\1\134\4\0\26\5\16\0\1\5\1\0"+
    "\14\5\4\0\3\5\1\135\13\5\1\136\6\5\16\0"+
    "\1\5\1\0\14\5\4\0\7\5\1\137\16\5\16\0"+
    "\1\5\1\0\14\5\4\0\1\140\10\5\1\141\14\5"+
    "\16\0\1\5\16\71\1\142\47\71\50\143\1\144\15\143"+
    "\1\0\1\145\15\0\1\146\47\0\4\5\1\147\7\5"+
    "\4\0\26\5\16\0\1\5\1\0\10\5\1\74\3\5"+
    "\4\0\26\5\16\0\1\5\1\0\13\5\1\147\4\0"+
    "\26\5\16\0\1\5\1\0\14\5\4\0\1\70\25\5"+
    "\16\0\1\5\1\0\13\5\1\150\4\0\26\5\16\0"+
    "\1\5\1\0\14\5\4\0\1\5\1\151\24\5\16\0"+
    "\1\5\1\0\14\5\4\0\7\5\1\152\16\5\16\0"+
    "\1\5\1\0\14\5\4\0\1\153\25\5\16\0\1\5"+
    "\1\0\14\5\4\0\3\5\1\70\2\5\1\154\17\5"+
    "\16\0\1\5\1\0\14\5\4\0\10\5\1\155\15\5"+
    "\16\0\1\5\1\0\14\5\4\0\1\156\25\5\16\0"+
    "\1\5\1\0\14\5\4\0\16\5\1\70\7\5\16\0"+
    "\1\5\1\0\14\5\4\0\5\5\1\70\20\5\16\0"+
    "\1\5\1\0\14\5\4\0\1\157\25\5\16\0\1\5"+
    "\1\0\13\5\1\160\4\0\26\5\16\0\1\5\1\0"+
    "\13\5\1\161\4\0\26\5\16\0\1\5\1\0\14\5"+
    "\4\0\1\5\1\162\24\5\16\0\1\5\1\0\14\5"+
    "\4\0\1\5\1\163\24\5\16\0\1\5\1\0\14\5"+
    "\4\0\14\5\1\164\11\5\16\0\1\5\1\0\14\5"+
    "\4\0\3\5\1\165\11\5\1\70\10\5\16\0\1\5"+
    "\1\0\14\5\4\0\4\5\1\166\1\5\1\167\17\5"+
    "\16\0\1\5\1\0\14\5\4\0\6\5\1\170\17\5"+
    "\16\0\1\5\1\0\14\5\4\0\1\70\6\5\1\171"+
    "\16\5\16\0\1\5\1\0\14\5\4\0\1\5\1\157"+
    "\24\5\16\0\1\5\1\0\14\5\4\0\6\5\1\172"+
    "\17\5\16\0\1\5\1\0\14\5\4\0\7\5\1\173"+
    "\16\5\16\0\1\5\1\0\14\5\4\0\3\5\1\174"+
    "\2\5\1\175\13\5\1\176\3\5\16\0\1\5\1\0"+
    "\12\5\1\177\1\125\4\0\26\5\16\0\1\5\1\0"+
    "\13\5\1\200\4\0\26\5\16\0\1\5\1\0\14\5"+
    "\4\0\16\5\1\201\2\5\1\202\4\5\16\0\1\5"+
    "\1\0\14\5\4\0\15\5\1\70\10\5\16\0\1\5"+
    "\1\0\14\5\4\0\20\5\1\203\5\5\16\0\1\5"+
    "\1\0\14\5\4\0\12\5\1\204\13\5\16\0\1\5"+
    "\1\0\14\5\4\0\15\5\1\205\10\5\16\0\1\5"+
    "\1\0\14\5\4\0\1\5\1\134\24\5\16\0\1\5"+
    "\1\0\14\5\4\0\20\5\1\37\5\5\16\0\1\5"+
    "\50\143\1\206\15\143\47\0\1\142\1\144\16\0\1\145"+
    "\65\0\14\5\4\0\22\5\1\207\3\5\16\0\1\5"+
    "\1\0\14\5\4\0\16\5\1\100\7\5\16\0\1\5"+
    "\1\0\12\5\1\157\1\5\4\0\26\5\16\0\1\5"+
    "\1\0\14\5\4\0\16\5\1\210\7\5\16\0\1\5"+
    "\1\0\14\5\4\0\3\5\1\172\22\5\16\0\1\5"+
    "\1\0\14\5\4\0\11\5\1\211\14\5\16\0\1\5"+
    "\1\0\14\5\4\0\4\5\1\70\21\5\16\0\1\5"+
    "\1\0\14\5\4\0\3\5\1\100\22\5\16\0\1\5"+
    "\1\0\13\5\1\212\4\0\26\5\16\0\1\5\1\0"+
    "\14\5\4\0\1\5\1\213\24\5\16\0\1\5\1\0"+
    "\12\5\1\214\1\5\4\0\26\5\16\0\1\5\1\0"+
    "\14\5\4\0\14\5\1\215\11\5\16\0\1\5\1\0"+
    "\13\5\1\100\4\0\26\5\16\0\1\5\1\0\14\5"+
    "\4\0\4\5\1\216\5\5\1\217\13\5\16\0\1\5"+
    "\1\0\14\5\4\0\1\220\25\5\16\0\1\5\1\0"+
    "\14\5\4\0\11\5\1\156\14\5\16\0\1\5\1\0"+
    "\14\5\4\0\3\5\1\221\22\5\16\0\1\5\1\0"+
    "\14\5\4\0\1\5\1\222\24\5\16\0\1\5\1\0"+
    "\14\5\4\0\6\5\1\70\17\5\16\0\1\5\1\0"+
    "\14\5\4\0\15\5\1\223\10\5\16\0\1\5\1\0"+
    "\14\5\4\0\1\5\1\224\10\5\1\225\13\5\16\0"+
    "\1\5\1\0\14\5\4\0\3\5\1\226\22\5\16\0"+
    "\1\5\1\0\14\5\4\0\1\227\25\5\16\0\1\5"+
    "\1\0\14\5\4\0\21\5\1\204\4\5\16\0\1\5"+
    "\1\0\14\5\4\0\1\230\25\5\16\0\1\5\1\0"+
    "\14\5\4\0\12\5\1\210\13\5\16\0\1\5\1\0"+
    "\14\5\4\0\1\231\25\5\16\0\1\5\1\0\11\5"+
    "\1\70\2\5\4\0\26\5\16\0\1\5\1\0\12\5"+
    "\1\110\1\5\4\0\26\5\16\0\1\5\47\232\1\142"+
    "\1\206\15\232\1\0\13\5\1\70\4\0\26\5\16\0"+
    "\1\5\1\0\14\5\4\0\3\5\1\70\22\5\16\0"+
    "\1\5\1\0\14\5\4\0\4\5\1\233\21\5\16\0"+
    "\1\5\1\0\14\5\4\0\11\5\1\234\14\5\16\0"+
    "\1\5\1\0\14\5\4\0\4\5\1\100\21\5\16\0"+
    "\1\5\1\0\13\5\1\210\4\0\26\5\16\0\1\5"+
    "\1\0\14\5\4\0\1\5\1\37\24\5\16\0\1\5"+
    "\1\0\14\5\4\0\12\5\1\235\13\5\16\0\1\5"+
    "\1\0\11\5\1\236\2\5\4\0\26\5\16\0\1\5"+
    "\1\0\11\5\1\237\2\5\4\0\26\5\16\0\1\5"+
    "\1\0\14\5\4\0\1\240\25\5\16\0\1\5\1\0"+
    "\14\5\4\0\2\5\1\100\23\5\16\0\1\5\1\0"+
    "\14\5\4\0\16\5\1\241\7\5\16\0\1\5\1\0"+
    "\14\5\4\0\12\5\1\242\13\5\16\0\1\5\1\0"+
    "\11\5\1\243\2\5\4\0\26\5\16\0\1\5\1\0"+
    "\14\5\4\0\4\5\1\244\21\5\16\0\1\5\1\0"+
    "\14\5\4\0\4\5\1\210\21\5\16\0\1\5\1\0"+
    "\14\5\4\0\6\5\1\245\17\5\16\0\1\5\1\0"+
    "\14\5\4\0\1\204\25\5\16\0\1\5\50\232\1\206"+
    "\15\232\1\0\14\5\4\0\12\5\1\246\13\5\16\0"+
    "\1\5\1\0\14\5\4\0\7\5\1\125\16\5\16\0"+
    "\1\5\1\0\14\5\4\0\14\5\1\201\11\5\16\0"+
    "\1\5\1\0\14\5\4\0\7\5\1\210\16\5\16\0"+
    "\1\5\1\0\14\5\4\0\3\5\1\247\22\5\16\0"+
    "\1\5\1\0\14\5\4\0\4\5\1\250\21\5\16\0"+
    "\1\5\1\0\14\5\4\0\11\5\1\251\14\5\16\0"+
    "\1\5\1\0\11\5\1\252\2\5\4\0\26\5\16\0"+
    "\1\5\1\0\12\5\1\100\1\5\4\0\26\5\16\0"+
    "\1\5\1\0\14\5\4\0\1\5\1\251\24\5\16\0"+
    "\1\5\1\0\14\5\4\0\7\5\1\100\16\5\16\0"+
    "\1\5\1\0\14\5\4\0\13\5\1\253\12\5\16\0"+
    "\1\5\1\0\14\5\4\0\23\5\1\254\2\5\16\0"+
    "\1\5\1\0\14\5\4\0\1\36\25\5\16\0\1\5"+
    "\1\0\14\5\4\0\12\5\1\255\13\5\16\0\1\5"+
    "\1\0\14\5\4\0\6\5\1\256\17\5\16\0\1\5"+
    "\1\0\14\5\4\0\1\5\1\257\24\5\16\0\1\5"+
    "\1\0\12\5\1\260\1\5\4\0\2\5\1\125\1\261"+
    "\22\5\16\0\1\5\1\0\11\5\1\210\2\5\4\0"+
    "\26\5\16\0\1\5\1\0\14\5\4\0\3\5\1\262"+
    "\22\5\16\0\1\5\1\0\14\5\4\0\3\5\1\263"+
    "\22\5\16\0\1\5\1\0\14\5\4\0\6\5\1\107"+
    "\17\5\16\0\1\5\1\0\14\5\4\0\12\5\1\264"+
    "\13\5\16\0\1\5\1\0\14\5\4\0\1\5\1\120"+
    "\24\5\16\0\1\5\1\0\14\5\4\0\12\5\1\265"+
    "\13\5\16\0\1\5\1\0\14\5\4\0\21\5\1\266"+
    "\4\5\16\0\1\5\1\0\14\5\4\0\11\5\1\204"+
    "\14\5\16\0\1\5\1\0\14\5\4\0\1\267\25\5"+
    "\16\0\1\5\1\0\14\5\4\0\6\5\1\270\17\5"+
    "\16\0\1\5\1\0\14\5\4\0\3\5\1\271\22\5"+
    "\16\0\1\5\1\0\14\5\4\0\1\5\1\47\24\5"+
    "\16\0\1\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9558];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\20\1\2\0\34\1\2\0"+
    "\46\1\1\11\1\1\1\0\1\1\1\0\37\1\1\0"+
    "\23\1\1\0\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public String column1;
    public String column2;
    public String line;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { lexeme = yytext(); column1 = Integer.toString((yycolumn)); column2 = Integer.toString(yycolumn + yylength()-1); line = Integer.toString(yyline+1); return ERROR;
          }
        case 12: break;
        case 5: 
          { lexeme = yytext(); column1 = Integer.toString((yycolumn)); column2 = Integer.toString(yycolumn + yylength()-1); line = Integer.toString(yyline+1); return Puntuacion;
          }
        case 13: break;
        case 2: 
          { lexeme = yytext(); column1 = Integer.toString((yycolumn)); column2 = Integer.toString(yycolumn + yylength()-1);  line = Integer.toString(yyline+1); return Entero;
          }
        case 14: break;
        case 3: 
          { if(yytext().length()<=31){lexeme = yytext(); column1 = Integer.toString((yycolumn)); column2 = Integer.toString(yycolumn + yylength()-1); line = Integer.toString(yyline+1); return Identificador;} else{String cortador=yytext().substring(0,31); lexeme = cortador; column1 = Integer.toString((yycolumn)); column2 = Integer.toString(yycolumn + yylength()-30); line = Integer.toString(yyline+1); return IdentificadorTruncado;}
          }
        case 15: break;
        case 11: 
          { lexeme = yytext(); column1 = Integer.toString((yycolumn)); column2 = Integer.toString(yycolumn + yylength()-1); line = Integer.toString(yyline+1); return Bit;
          }
        case 16: break;
        case 7: 
          { lexeme = yytext(); column1 = Integer.toString((yycolumn)); column2 = Integer.toString(yycolumn + yylength()-1); line = Integer.toString(yyline+1); return PalabraClave;
          }
        case 17: break;
        case 4: 
          { /*se ignoran los espacios*/
          }
        case 18: break;
        case 10: 
          { lexeme = yytext(); column1 = Integer.toString((yycolumn)); column2 = Integer.toString(yycolumn + yylength()-1); line = Integer.toString(yyline+1); return ComentarioE;
          }
        case 19: break;
        case 6: 
          { lexeme = yytext(); column1 = Integer.toString((yycolumn)); column2 = Integer.toString(yycolumn + yylength()-1); line = Integer.toString(yyline+1); return Float;
          }
        case 20: break;
        case 9: 
          { lexeme = yytext(); column1 = Integer.toString((yycolumn)); column2 = Integer.toString(yycolumn + yylength()-1); line = Integer.toString(yyline+1); return Cadena;
          }
        case 21: break;
        case 8: 
          { /*se ignoran los comentario*/
          }
        case 22: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
