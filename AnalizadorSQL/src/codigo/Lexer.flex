package codigo;
import static codigo.Tokens.*;
%%

%class Lexer
%type Tokens
%line
%column



Int = [0-9][0-9]*

String = ['][^'\n]*[']|[´][^´\n]*[´]
Float= [-+]?[0-9]+"."|[-+]?[0-9]+"."([0-9]+|("E"|"e")[-+]?[0-9]+|[0-9]+("E"|"e")[-+]?[0-9]+)
TC = "/*"  ~"*/" | "/*" "*"+ "/"
EC = "--" [^\r\n]* [\r|\n|\r\n]?
//Punt = "+"|"-"|"*"|"/"|"%"|"<"|"<="|">"|">="|"="|"=="|"!="|"&&"|"||"|"!"|";"|","|"."|"["|"]"|"("|")"|"{"|"}"|"[]"|"()"|"{}"|"@"|"#"|"##"
in = "/*" [^*\n]+


ADD = "ADD"
ALL = "ALL"
ALTER= "ALTER"
AND = "AND"
ANY = "ANY"
AS = "AS"
ASC = "ASC"
AUTHORIZATION = "AUTHORIZATION"
BACKUP = "BACKUP"
BEGIN = "BEGIN"
BETWEEN = "BETWEEN"
BREAK = "BREAK"
BROWSE ="BROWSE"
BULK ="BULK"
BY = "BY"
CASCADE = "CASCADE"
CASE = "CASE"
CHECK = "CHECK"
CHECKPOINT = "CHECKPOINT"
CLOSE = "CLOSE"
CLUSTERED = "CLUSTERED"
COALESCE = "COALESCE"
COLLATE = "COLLATE"
COLUMN = "COLUMN"
COMMIT = "COMMIT"
COMPUTE = "COMPUTE"
CONSTRAINT = "CONSTRAINT"
CONTAINS = "CONTAINS"
CONTAINSTABLE = "CONTAINSTABLE"
CONTINUE = "CONTINUE"
CONVERT = "CONVERT"
CREATE = "CREATE"
CROSS = "CROSS"
CURRENT = "CURRENT"
CURRENT_DATE = "CURRENT_DATE"
CURRENT_TIME = "CURRENT_TIME"
CURRENT_TIMESTAMP = "CURRENT_TIMESTAMP"
CURRENT_USER = "CURRENT_USER"
CURSOR = "CURSOR"
DATABASE = "DATABASE"
DBCC = "DBCC"
DEALLOCATE = "DEALLOCATE"
DECLARE = "DECLARE"
DEFAULT = "DEFAULT"
DELETE = "DELETE"
DENY = "DENY"
DESC = "DESC"
DISK = "DISK"
DISTINCT = "DISTINCT"
DISTRIBUTED = "DISTRIBUTED"
DOUBLE = "DOUBLE"
DROP = "DROP"
DUMP = "DUMP"
ELSE = "ELSE"
END = "END"
ERRLVL = "ERRLVL"
ESCAPE = "ESCAPE"
EXCEPT = "EXCEPT"
EXEC = "EXEC"
EXECUTE = "EXECUTE"
EXISTS = "EXISTS"
EXIT = "EXIT"
EXTERNAL = "EXTERNAL"
FETCH = "FETCH"
FILE = "FILE"
FILLFACTOR = "FILLFACTOR"
FOR = "FOR"
FOREIGN = "FOREIGN"
FREETEXT = "FREETEXT"
FREETEXTTABLE = "FREETEXTTABLE"
FROM = "FROM"
FULL = "FULL"
FUNCTION = "FUNCTION"
GOTO = "GOTO"
GRANT = "GRANT"
GROUP = "GROUP"
HAVING = "HAVING"
HOLDLOCK = "HOLDLOCK"
IDENTITY = "IDENTITY"
IDENTITY_INSERT = "IDENTITY_INSERT"
IDENTITYCOL = "IDENTITYCOL"
IF = "IF"
IN = "IN"
INDEX = "INDEX"
INNER = "INNER"
INSERT = "INSERT"
INTERSECT = "INTERSECT"
INTO = "INTO"
IS = "IS"
JOIN = "JOIN"
KEY = "KEY"
KILL = "KILL"
LEFT = "LEFT"
LIKE = "LIKE"
LINENO = "LINENO"
LOAD = "LOAD"
MERGE = "MERGE"
NATIONAL = "NATIONAL"
NOCHECK = "NOCHECK"
NONCLUSTERED = "NONCLUSTERED"
NOT = "NOT"
NULL = "NULL"
NULLIF = "NULLIF"
OF = "OF"
OFF = "OFF"
OFFSETS = "OFFSETS"
ON = "ON"
OPEN = "OPEN"
OPENDATASOURCE = "OPENDATASOURCE"
OPENQUERY = "OPENQUERY"
OPENROWSET = "OPENROWSET"
OPENXML = "OPENXML"
OPTION = "OPTION"
OR = "OR"
ORDER = "ORDER"
OUTER = "OUTER"
OVER = "OVER"
PERCENT = "PERCENT"
PIVOT = "PIVOT"
PLAN = "PLAN"
PRECISION = "PRECISION"
PRIMARY = "PRIMARY"
PRINT = "PRINT"
PROC = "PROC"
PROCEDURE = "PROCEDURE"
PUBLIC = "PUBLIC"
RAISERROR = "RAISERROR"
READ = "READ"
READTEXT = "READTEXT"
RECONFIGURE = "RECONFIGURE"
REFERENCES = "REFERENCES"
REPLICATION = "REPLICATION"
RESTORE = "RESTORE"
RESTRICT = "RESTRICT"
RETURN = "RETURN"
REVERT = "REVERT"
REVOKE = "REVOKE"
RIGHT = "RIGHT"
ROLLBACK = "ROLLBACK"
ROWCOUNT = "ROWCOUNT"
ROWGUIDCOL = "ROWGUIDCOL"
RULE = "RULE"
SAVE = "SAVE"
SCHEMA = "SCHEMA"
SECURITYAUDIT = "SECURITYAUDIT"
SELECT = "SELECT"
SEMANTICKEYPHRASETABLE = "SEMANTICKEYPHRASETABLE"
SEMANTICSIMILARITYDETAILSTABLE = "SEMANTICSIMILARITYDETAILSTABLE"
SEMANTICSIMILARITYTABLE = "SEMANTICSIMILARITYTABLE"
SESSION_USER = "SESSION_USER"
SET = "SET"
SETUSER = "SETUSER"
SHUTDOWN = "SHUTDOWN"
SOME = "SOME"
STATISTICS = "STATISTICS"
SYSTEM_USER = "SYSTEM_USER"
TABLE = "TABLE"
TABLESAMPLE = "TABLESAMPLE"
TEXTSIZE = "TEXTSIZE"
THEN = "THEN"
TO = "TO"
TOP = "TOP"
TRAN = "TRAN"
TRANSACTION = "TRANSACTION"
TRIGGER = "TRIGGER"
TRUNCATE = "TRUNCATE"
TRY_CONVERT = "TRY_CONVERT"
TSEQUAL = "TSEQUAL"
UNION = "UNION"
UNIQUE = "UNIQUE"
UNPIVOT = "UNPIVOT"
UPDATE = "UPDATE"
UPDATETEXT = "UPDATETEXT"
USE = "USE"
USER = "USER"
VALUES = "VALUES"
VARYING = "VARYING"
VIEW = "VIEW"
WAITFOR = "WAITFOR"
WHEN = "WHEN"
WHERE = "WHERE"
WHILE = "WHILE"
WITH = "WITH"
WITHIN_GROUP = "WITHIN GROUP"
WRITETEXT = "WRITETEXT"


/* Empiezan ODBC*/

ABSOLUTE = "ABSOLUTE"
ACTION = "ACTION"
ADA = "ADA"
ALLOCATE = "ALLOCATE"
ARE = "ARE"
ASSERTION = "ASSERTION"
AT = "AT"
AVG = "AVG"
BIT = "BIT"
BIT_LENGTH = "BIT_LENGTH"
BOTH = "BOTH"
CASCADED = "CASCADED"
CAST = "CAST"
CATALOG = "CATALOG"
CHAR = "CHAR"
CHAR_LENGTH = "CHAR_LENGTH"
CHARACTER = "CHARACTER"
CHARACTER_LENGTH = "CHARACTER_LENGTH"
COLLATION = "COLLATION"
CONNECT = "CONNECT"
CONNECTION = "CONNECTION"
CONSTRAINTS = "CONSTRAINTS"
CORRESPONDING = "CORRESPONDING"
COUNT = "COUNT"
DATE = "DATE"
DAY = "DAY"
DEC = "DEC"
DECIMAL = "DECIMAL"
DEFERRABLE = "DEFERRABLE"
DEFERRED = "DEFERRED"
DESCRIBE = "DESCRIBE"
DESCRIPTOR = "DESCRIPTOR"
DIAGNOSTICS = "DIAGNOSTICS"
DISCONNECT = "DISCONNECT"
DOMAIN = "DOMAIN"
END_EXEC = "END-EXEC"
EXCEPTION = "EXCEPTION"
EXTRACT = "EXTRACT"
FALSE = "FALSE"
FIRST = "FIRST"
FLOAT = "FLOAT"
FORTRAN = "FORTRAN"
FOUND = "FOUND"
GET = "GET"
GLOBAL = "GLOBAL"
GO = "GO"
HOUR = "HOUR"
IMMEDIATE = "IMMEDIATE"
INCLUDE = "INCLUDE"
INDICATOR = "INDICATOR"
INITIALLY = "INITIALLY"
INPUT = "INPUT"
INSENSITIVE = "INSENSITIVE"
INT = "INT"
INTEGER = "INTEGER"
INTERVAL = "INTERVAL"
ISOLATION = "ISOLATION"
LANGUAGE = "LANGUAGE"
LAST = "LAST"
LEADING = "LEADING"
LEVEL = "LEVEL"
LOCAL = "LOCAL"
LOWER = "LOWER"
MATCH = "MATCH"
MAX = "MAX"
MIN = "MIN"
MINUTE = "MINUTE"
MODULE = "MODULE"
MONTH = "MONTH"
NAMES = "NAMES"
NATURAL = "NATURAL"
NCHAR = "NCHAR"
NEXT = "NEXT"
NO = "NO"
NONE = "NONE"
NUMERIC = "NUMERIC"
OCTET_LENGTH = "OCTET_LENGTH"
ONLY = "ONLY"
OUTPUT = "OUTPUT"
OVERLAPS = "OVERLAPS"
PAD = "PAD"
PARTIAL = "PARTIAL"
PASCAL = "PASCAL"
POSITION = "POSITION"
PREPARE = "PREPARE"
PRESERVE = "PRESERVE"
PRIOR = "PRIOR"
PRIVILEGES = "PRIVILEGES"
REAL = "REAL"
RELATIVE = "RELATIVE"
ROWS = "ROWS"
SCROLL = "SCROLL"
SECOND = "SECOND"
SECTION = "SECTION"
SESSION = "SESSION"
SIZE = "SIZE"
SMALLINT = "SMALLINT"
SPACE = "SPACE"
SQL = "SQL"
SQLCA = "SQLCA"
SQLCODE = "SQLCODE"
SQLERROR = "SQLERROR"
SQLSTATE = "SQLSTATE"
SQLWARNING = "SQLWARNING"
SUBSTRING = "SUBSTRING"
SUM = "SUM"
TEMPORARY = "TEMPORARY"
TIME = "TIME"
TIMESTAMP = "TIMESTAMP"
TIMEZONE_HOUR = "TIMEZONE_HOUR"
TIMEZONE_MINUTE = "TIMEZONE_MINUTE"
TRAILING = "TRAILING"
TRANSLATE = "TRANSLATE"
TRANSLATION = "TRANSLATION"
TRIM = "TRIM"
TRUE = "TRUE"
UNKNOWN = "UNKNOWN"
UPPER = "UPPER"
USAGE = "USAGE"
USING = "USING"
VALUE = "VALUE"
VARCHAR = "VARCHAR"
WHENEVER = "WHENEVER"
WORK = "WORK"
WRITE = "WRITE"
YEAR = "YEAR"
ZONE = "ZONE"
LOGIN = "LOGIN"


%{
    public String lexeme;
    public String column1;
    public String column2;
    public String line;
%}

%%


//{Punt} { line = Integer.toString(yyline+1); return Puntuacion;}
{Int} {  line = Integer.toString(yyline+1); return Entero;}
{String} { line = Integer.toString(yyline+1); return Cadena;}
{Float} { line = Integer.toString(yyline+1); return Float;}

{ADD} { line = Integer.toString(yyline+1); return ADD; }
{ALL} { line = Integer.toString(yyline+1); return ALL; }
{ALTER} { line = Integer.toString(yyline+1); return ALTER; }
{AND} { line = Integer.toString(yyline+1); return AND; }
{ANY} { line = Integer.toString(yyline+1); return ANY; }
{AS} { line = Integer.toString(yyline+1); return AS; }
{ASC} { line = Integer.toString(yyline+1); return ASC; }
{AUTHORIZATION} { line = Integer.toString(yyline+1); return AUTHORIZATION; }
{BACKUP} { line = Integer.toString(yyline+1); return BACKUP; }
{BEGIN} { line = Integer.toString(yyline+1); return BEGIN; }
{BETWEEN} { line = Integer.toString(yyline+1); return BETWEEN; }
{BREAK} { line = Integer.toString(yyline+1); return BREAK; }
{BROWSE} { line = Integer.toString(yyline+1); return BROWSE; }
{BULK} { line = Integer.toString(yyline+1); return BULK; }
{BY} { line = Integer.toString(yyline+1); return BY; }
{CASCADE} { line = Integer.toString(yyline+1); return CASCADE; }
{CASE} { line = Integer.toString(yyline+1); return CASE; }
{CHECK} { line = Integer.toString(yyline+1); return CHECK; }
{CHECKPOINT} { line = Integer.toString(yyline+1); return CHECKPOINT; }
{CLOSE} { line = Integer.toString(yyline+1); return CLOSE; }
{CLUSTERED} { line = Integer.toString(yyline+1); return CLUSTERED; }
{COALESCE} { line = Integer.toString(yyline+1); return COALESCE; }
{COLLATE} { line = Integer.toString(yyline+1); return COLLATE; }
{COLUMN} { line = Integer.toString(yyline+1); return COLUMN; }
{COMMIT} { line = Integer.toString(yyline+1); return COMMIT; }
{COMPUTE} { line = Integer.toString(yyline+1); return COMPUTE; }
{CONSTRAINT} { line = Integer.toString(yyline+1); return CONSTRAINT; }
{CONTAINS} { line = Integer.toString(yyline+1); return CONTAINS; }
{CONTAINSTABLE} { line = Integer.toString(yyline+1); return CONTAINSTABLE; }
{CONTINUE} { line = Integer.toString(yyline+1); return CONTINUE; }
{CONVERT} { line = Integer.toString(yyline+1); return CONVERT; }
{CREATE} { line = Integer.toString(yyline+1); return CREATE; }
{CROSS} { line = Integer.toString(yyline+1); return CROSS; }
{CURRENT} { line = Integer.toString(yyline+1); return CURRENT; }
{CURRENT_DATE} { line = Integer.toString(yyline+1); return CURRENT_DATE; }
{CURRENT_TIME} { line = Integer.toString(yyline+1); return CURRENT_TIME; }
{CURRENT_TIMESTAMP} { line = Integer.toString(yyline+1); return CURRENT_TIMESTAMP; }
{CURRENT_USER} { line = Integer.toString(yyline+1); return CURRENT_USER; }
{CURSOR} { line = Integer.toString(yyline+1); return CURSOR; }
{DATABASE} { line = Integer.toString(yyline+1); return DATABASE; }
{DBCC} { line = Integer.toString(yyline+1); return DBCC; }
{DEALLOCATE} { line = Integer.toString(yyline+1); return DEALLOCATE; }
{DECLARE} { line = Integer.toString(yyline+1); return DECLARE; }
{DEFAULT} { line = Integer.toString(yyline+1); return DEFAULT; }
{DELETE} { line = Integer.toString(yyline+1); return DELETE; }
{DENY} { line = Integer.toString(yyline+1); return DENY; }
{DESC} { line = Integer.toString(yyline+1); return DESC; }
{DISK} { line = Integer.toString(yyline+1); return DISK; }
{DISTINCT} { line = Integer.toString(yyline+1); return DISTINCT; }
{DISTRIBUTED} { line = Integer.toString(yyline+1); return DISTRIBUTED; }
{DOUBLE} { line = Integer.toString(yyline+1); return DOUBLE; }
{DROP} { line = Integer.toString(yyline+1); return DROP; }
{DUMP} { line = Integer.toString(yyline+1); return DUMP; }
{ELSE} { line = Integer.toString(yyline+1); return ELSE; }
{END} { line = Integer.toString(yyline+1); return END; }
{ERRLVL} { line = Integer.toString(yyline+1); return ERRLVL; }
{ESCAPE} { line = Integer.toString(yyline+1); return ESCAPE; }
{EXCEPT} { line = Integer.toString(yyline+1); return EXCEPT; }
{EXEC} { line = Integer.toString(yyline+1); return EXEC; }
{EXECUTE} { line = Integer.toString(yyline+1); return EXECUTE; }
{EXISTS} { line = Integer.toString(yyline+1); return EXISTS; }
{EXIT} { line = Integer.toString(yyline+1); return EXIT; }
{EXTERNAL} { line = Integer.toString(yyline+1); return EXTERNAL; }
{FETCH} { line = Integer.toString(yyline+1); return FETCH; }
{FILE} { line = Integer.toString(yyline+1); return FILE; }
{FILLFACTOR} { line = Integer.toString(yyline+1); return FILLFACTOR; }
{FOR} { line = Integer.toString(yyline+1); return FOR; }
{FOREIGN} { line = Integer.toString(yyline+1); return FOREIGN; }
{FREETEXT} { line = Integer.toString(yyline+1); return FREETEXT; }
{FREETEXTTABLE} { line = Integer.toString(yyline+1); return FREETEXTTABLE; }
{FROM} { line = Integer.toString(yyline+1); return FROM; }
{FULL} { line = Integer.toString(yyline+1); return FULL; }
{FUNCTION} { line = Integer.toString(yyline+1); return FUNCTION; }
{GOTO} { line = Integer.toString(yyline+1); return GOTO; }
{GRANT} { line = Integer.toString(yyline+1); return GRANT; }
{GROUP} { line = Integer.toString(yyline+1); return GROUP; }
{HAVING} { line = Integer.toString(yyline+1); return HAVING; }
{HOLDLOCK} { line = Integer.toString(yyline+1); return HOLDLOCK; }
{IDENTITY} { line = Integer.toString(yyline+1); return IDENTITY; }
{IDENTITY_INSERT} { line = Integer.toString(yyline+1); return IDENTITY_INSERT; }
{IDENTITYCOL} { line = Integer.toString(yyline+1); return IDENTITYCOL; }
{IF} { line = Integer.toString(yyline+1); return IF; }
{IN} { line = Integer.toString(yyline+1); return IN; }
{INDEX} { line = Integer.toString(yyline+1); return INDEX; }
{INNER} { line = Integer.toString(yyline+1); return INNER; }
{INSERT} { line = Integer.toString(yyline+1); return INSERT; }
{INTERSECT} { line = Integer.toString(yyline+1); return INTERSECT; }
{INTO} { line = Integer.toString(yyline+1); return INTO; }
{IS} { line = Integer.toString(yyline+1); return IS; }
{JOIN} { line = Integer.toString(yyline+1); return JOIN; }
{KEY} { line = Integer.toString(yyline+1); return KEY; }
{KILL} { line = Integer.toString(yyline+1); return KILL; }
{LEFT} { line = Integer.toString(yyline+1); return LEFT; }
{LIKE} { line = Integer.toString(yyline+1); return LIKE; }
{LINENO} { line = Integer.toString(yyline+1); return LINENO; }
{LOAD} { line = Integer.toString(yyline+1); return LOAD; }
{MERGE} { line = Integer.toString(yyline+1); return MERGE; }
{NATIONAL} { line = Integer.toString(yyline+1); return NATIONAL; }
{NOCHECK} { line = Integer.toString(yyline+1); return NOCHECK; }
{NONCLUSTERED} { line = Integer.toString(yyline+1); return NONCLUSTERED; }
{NOT} { line = Integer.toString(yyline+1); return NOT; }
{NULL} { line = Integer.toString(yyline+1); return NULL; }
{NULLIF} { line = Integer.toString(yyline+1); return NULLIF; }
{OF} { line = Integer.toString(yyline+1); return OF; }
{OFF} { line = Integer.toString(yyline+1); return OFF; }
{OFFSETS} { line = Integer.toString(yyline+1); return OFFSETS; }
{ON} { line = Integer.toString(yyline+1); return ON; }
{OPEN} { line = Integer.toString(yyline+1); return OPEN; }
{OPENDATASOURCE} { line = Integer.toString(yyline+1); return OPENDATASOURCE; }
{OPENQUERY} { line = Integer.toString(yyline+1); return OPENQUERY; }
{OPENROWSET} { line = Integer.toString(yyline+1); return OPENROWSET; }
{OPENXML} { line = Integer.toString(yyline+1); return OPENXML; }
{OPTION} { line = Integer.toString(yyline+1); return OPTION; }
{OR} { line = Integer.toString(yyline+1); return OR; }
{ORDER} { line = Integer.toString(yyline+1); return ORDER; }
{OUTER} { line = Integer.toString(yyline+1); return OUTER; }
{OVER} { line = Integer.toString(yyline+1); return OVER; }
{PERCENT} { line = Integer.toString(yyline+1); return PERCENT; }
{PIVOT} { line = Integer.toString(yyline+1); return PIVOT; }
{PLAN} { line = Integer.toString(yyline+1); return PLAN; }
{PRECISION} { line = Integer.toString(yyline+1); return PRECISION; }
{PRIMARY} { line = Integer.toString(yyline+1); return PRIMARY; }
{PRINT} { line = Integer.toString(yyline+1); return PRINT; }
{PROC} { line = Integer.toString(yyline+1); return PROC; }
{PROCEDURE} { line = Integer.toString(yyline+1); return PROCEDURE; }
{PUBLIC} { line = Integer.toString(yyline+1); return PUBLIC; }
{RAISERROR} { line = Integer.toString(yyline+1); return RAISERROR; }
{READ} { line = Integer.toString(yyline+1); return READ; }
{READTEXT} { line = Integer.toString(yyline+1); return READTEXT; }
{RECONFIGURE} { line = Integer.toString(yyline+1); return RECONFIGURE; }
{REFERENCES} { line = Integer.toString(yyline+1); return REFERENCES; }
{REPLICATION} { line = Integer.toString(yyline+1); return REPLICATION; }
{RESTORE} { line = Integer.toString(yyline+1); return RESTORE; }
{RESTRICT} { line = Integer.toString(yyline+1); return RESTRICT; }
{RETURN} { line = Integer.toString(yyline+1); return RETURN; }
{REVERT} { line = Integer.toString(yyline+1); return REVERT; }
{REVOKE} { line = Integer.toString(yyline+1); return REVOKE; }
{RIGHT} { line = Integer.toString(yyline+1); return RIGHT; }
{ROLLBACK} { line = Integer.toString(yyline+1); return ROLLBACK; }
{ROWCOUNT} { line = Integer.toString(yyline+1); return ROWCOUNT; }
{ROWGUIDCOL} { line = Integer.toString(yyline+1); return ROWGUIDCOL; }
{RULE} { line = Integer.toString(yyline+1); return RULE; }
{SAVE} { line = Integer.toString(yyline+1); return SAVE; }
{SCHEMA} { line = Integer.toString(yyline+1); return SCHEMA; }
{SECURITYAUDIT} { line = Integer.toString(yyline+1); return SECURITYAUDIT; }
{SELECT} { line = Integer.toString(yyline+1); return SELECT; }
{SEMANTICKEYPHRASETABLE} { line = Integer.toString(yyline+1); return SEMANTICKEYPHRASETABLE; }
{SEMANTICSIMILARITYDETAILSTABLE} { line = Integer.toString(yyline+1); return SEMANTICSIMILARITYDETAILSTABLE; }
{SEMANTICSIMILARITYTABLE} { line = Integer.toString(yyline+1); return SEMANTICSIMILARITYTABLE; }
{SESSION_USER} { line = Integer.toString(yyline+1); return SESSION_USER; }
{SET} { line = Integer.toString(yyline+1); return SET; }
{SETUSER} { line = Integer.toString(yyline+1); return SETUSER; }
{SHUTDOWN} { line = Integer.toString(yyline+1); return SHUTDOWN; }
{SOME} { line = Integer.toString(yyline+1); return SOME; }
{STATISTICS} { line = Integer.toString(yyline+1); return STATISTICS; }
{SYSTEM_USER} { line = Integer.toString(yyline+1); return SYSTEM_USER; }
{TABLE} { line = Integer.toString(yyline+1); return TABLE; }
{TABLESAMPLE} { line = Integer.toString(yyline+1); return TABLESAMPLE; }
{TEXTSIZE} { line = Integer.toString(yyline+1); return TEXTSIZE; }
{THEN} { line = Integer.toString(yyline+1); return THEN; }
{TO} { line = Integer.toString(yyline+1); return TO; }
{TOP} { line = Integer.toString(yyline+1); return TOP; }
{TRAN} { line = Integer.toString(yyline+1); return TRAN; }
{TRANSACTION} { line = Integer.toString(yyline+1); return TRANSACTION; }
{TRIGGER} { line = Integer.toString(yyline+1); return TRIGGER; }
{TRUNCATE} { line = Integer.toString(yyline+1); return TRUNCATE; }
{TRY_CONVERT} { line = Integer.toString(yyline+1); return TRY_CONVERT; }
{TSEQUAL} { line = Integer.toString(yyline+1); return TSEQUAL; }
{UNION} { line = Integer.toString(yyline+1); return UNION; }
{UNIQUE} { line = Integer.toString(yyline+1); return UNIQUE; }
{UNPIVOT} { line = Integer.toString(yyline+1); return UNPIVOT; }
{UPDATE} { line = Integer.toString(yyline+1); return UPDATE; }
{UPDATETEXT} { line = Integer.toString(yyline+1); return UPDATETEXT; }
{USE} { line = Integer.toString(yyline+1); return USE; }
{USER} { line = Integer.toString(yyline+1); return USER; }
{VALUES} { line = Integer.toString(yyline+1); return VALUES; }
{VARYING} { line = Integer.toString(yyline+1); return VARYING; }
{VIEW} { line = Integer.toString(yyline+1); return VIEW; }
{WAITFOR} { line = Integer.toString(yyline+1); return WAITFOR; }
{WHEN} { line = Integer.toString(yyline+1); return WHEN; }
{WHERE} { line = Integer.toString(yyline+1); return WHERE; }
{WHILE} { line = Integer.toString(yyline+1); return WHILE; }
{WITH} { line = Integer.toString(yyline+1); return WITH; }
{WITHIN_GROUP} { line = Integer.toString(yyline+1); return WITHIN_GROUP; }
{WRITETEXT} { line = Integer.toString(yyline+1); return WRITETEXT; }
{ABSOLUTE} { line = Integer.toString(yyline+1); return ABSOLUTE; }
{ACTION} { line = Integer.toString(yyline+1); return ACTION; }
{ADA} { line = Integer.toString(yyline+1); return ADA; }
{ALLOCATE} { line = Integer.toString(yyline+1); return ALLOCATE; }
{ARE} { line = Integer.toString(yyline+1); return ARE; }
{ASSERTION} { line = Integer.toString(yyline+1); return ASSERTION; }
{AT} { line = Integer.toString(yyline+1); return AT; }
{AVG} { line = Integer.toString(yyline+1); return AVG; }
{BIT} { line = Integer.toString(yyline+1); return BIT; }
{BIT_LENGTH} { line = Integer.toString(yyline+1); return BIT_LENGTH; }
{BOTH} { line = Integer.toString(yyline+1); return BOTH; }
{CASCADED} { line = Integer.toString(yyline+1); return CASCADED; }
{CAST} { line = Integer.toString(yyline+1); return CAST; }
{CATALOG} { line = Integer.toString(yyline+1); return CATALOG; }
{CHAR} { line = Integer.toString(yyline+1); return CHAR; }
{CHAR_LENGTH} { line = Integer.toString(yyline+1); return CHAR_LENGTH; }
{CHARACTER} { line = Integer.toString(yyline+1); return CHARACTER; }
{CHARACTER_LENGTH} { line = Integer.toString(yyline+1); return CHARACTER_LENGTH; }
{COLLATION} { line = Integer.toString(yyline+1); return COLLATION; }
{CONNECT} { line = Integer.toString(yyline+1); return CONNECT; }
{CONNECTION} { line = Integer.toString(yyline+1); return CONNECTION; }
{CONSTRAINTS} { line = Integer.toString(yyline+1); return CONSTRAINTS; }
{CORRESPONDING} { line = Integer.toString(yyline+1); return CORRESPONDING; }
{COUNT} { line = Integer.toString(yyline+1); return COUNT; }
{DATE} { line = Integer.toString(yyline+1); return DATE; }
{DAY} { line = Integer.toString(yyline+1); return DAY; }
{DEC} { line = Integer.toString(yyline+1); return DEC; }
{DECIMAL} { line = Integer.toString(yyline+1); return DECIMAL; }
{DEFERRABLE} { line = Integer.toString(yyline+1); return DEFERRABLE; }
{DEFERRED} { line = Integer.toString(yyline+1); return DEFERRED; }
{DESCRIBE} { line = Integer.toString(yyline+1); return DESCRIBE; }
{DESCRIPTOR} { line = Integer.toString(yyline+1); return DESCRIPTOR; }
{DIAGNOSTICS} { line = Integer.toString(yyline+1); return DIAGNOSTICS; }
{DISCONNECT} { line = Integer.toString(yyline+1); return DISCONNECT; }
{DOMAIN} { line = Integer.toString(yyline+1); return DOMAIN; }
{END_EXEC} { line = Integer.toString(yyline+1); return END_EXEC; }
{EXCEPTION} { line = Integer.toString(yyline+1); return EXCEPTION; }
{EXTRACT} { line = Integer.toString(yyline+1); return EXTRACT; }
{FALSE} { line = Integer.toString(yyline+1); return FALSE; }
{FIRST} { line = Integer.toString(yyline+1); return FIRST; }
{FLOAT} { line = Integer.toString(yyline+1); return FLOAT; }
{FORTRAN} { line = Integer.toString(yyline+1); return FORTRAN; }
{FOUND} { line = Integer.toString(yyline+1); return FOUND; }
{GET} { line = Integer.toString(yyline+1); return GET; }
{GLOBAL} { line = Integer.toString(yyline+1); return GLOBAL; }
{GO} { line = Integer.toString(yyline+1); return GO; }
{HOUR} { line = Integer.toString(yyline+1); return HOUR; }
{IMMEDIATE} { line = Integer.toString(yyline+1); return IMMEDIATE; }
{INCLUDE} { line = Integer.toString(yyline+1); return INCLUDE; }
{INDICATOR} { line = Integer.toString(yyline+1); return INDICATOR; }
{INITIALLY} { line = Integer.toString(yyline+1); return INITIALLY; }
{INPUT} { line = Integer.toString(yyline+1); return INPUT; }
{INSENSITIVE} { line = Integer.toString(yyline+1); return INSENSITIVE; }
{INT} { line = Integer.toString(yyline+1); return INT; }
{INTEGER} { line = Integer.toString(yyline+1); return INTEGER; }
{INTERVAL} { line = Integer.toString(yyline+1); return INTERVAL; }
{ISOLATION} { line = Integer.toString(yyline+1); return ISOLATION; }
{LANGUAGE} { line = Integer.toString(yyline+1); return LANGUAGE; }
{LAST} { line = Integer.toString(yyline+1); return LAST; }
{LEADING} { line = Integer.toString(yyline+1); return LEADING; }
{LEVEL} { line = Integer.toString(yyline+1); return LEVEL; }
{LOCAL} { line = Integer.toString(yyline+1); return LOCAL; }
{LOWER} { line = Integer.toString(yyline+1); return LOWER; }
{MATCH} { line = Integer.toString(yyline+1); return MATCH; }
{MAX} { line = Integer.toString(yyline+1); return MAX; }
{MIN} { line = Integer.toString(yyline+1); return MIN; }
{MINUTE} { line = Integer.toString(yyline+1); return MINUTE; }
{MODULE} { line = Integer.toString(yyline+1); return MODULE; }
{MONTH} { line = Integer.toString(yyline+1); return MONTH; }
{NAMES} { line = Integer.toString(yyline+1); return NAMES; }
{NATURAL} { line = Integer.toString(yyline+1); return NATURAL; }
{NCHAR} { line = Integer.toString(yyline+1); return NCHAR; }
{NEXT} { line = Integer.toString(yyline+1); return NEXT; }
{NO} { line = Integer.toString(yyline+1); return NO; }
{NONE} { line = Integer.toString(yyline+1); return NONE; }
{NUMERIC} { line = Integer.toString(yyline+1); return NUMERIC; }
{OCTET_LENGTH} { line = Integer.toString(yyline+1); return OCTET_LENGTH; }
{ONLY} { line = Integer.toString(yyline+1); return ONLY; }
{OUTPUT} { line = Integer.toString(yyline+1); return OUTPUT; }
{OVERLAPS} { line = Integer.toString(yyline+1); return OVERLAPS; }
{PAD} { line = Integer.toString(yyline+1); return PAD; }
{PARTIAL} { line = Integer.toString(yyline+1); return PARTIAL; }
{PASCAL} { line = Integer.toString(yyline+1); return PASCAL; }
{POSITION} { line = Integer.toString(yyline+1); return POSITION; }
{PREPARE} { line = Integer.toString(yyline+1); return PREPARE; }
{PRESERVE} { line = Integer.toString(yyline+1); return PRESERVE; }
{PRIOR} { line = Integer.toString(yyline+1); return PRIOR; }
{PRIVILEGES} { line = Integer.toString(yyline+1); return PRIVILEGES; }
{REAL} { line = Integer.toString(yyline+1); return REAL; }
{RELATIVE} { line = Integer.toString(yyline+1); return RELATIVE; }
{ROWS} { line = Integer.toString(yyline+1); return ROWS; }
{SCROLL} { line = Integer.toString(yyline+1); return SCROLL; }
{SECOND} { line = Integer.toString(yyline+1); return SECOND; }
{SECTION} { line = Integer.toString(yyline+1); return SECTION; }
{SESSION} { line = Integer.toString(yyline+1); return SESSION; }
{SIZE} { line = Integer.toString(yyline+1); return SIZE; }
{SMALLINT} { line = Integer.toString(yyline+1); return SMALLINT; }
{SPACE} { line = Integer.toString(yyline+1); return SPACE; }
{SQL} { line = Integer.toString(yyline+1); return SQL; }
{SQLCA} { line = Integer.toString(yyline+1); return SQLCA; }
{SQLCODE} { line = Integer.toString(yyline+1); return SQLCODE; }
{SQLERROR} { line = Integer.toString(yyline+1); return SQLERROR; }
{SQLSTATE} { line = Integer.toString(yyline+1); return SQLSTATE; }
{SQLWARNING} { line = Integer.toString(yyline+1); return SQLWARNING; }
{SUBSTRING} { line = Integer.toString(yyline+1); return SUBSTRING; }
{SUM} { line = Integer.toString(yyline+1); return SUM; }
{TEMPORARY} { line = Integer.toString(yyline+1); return TEMPORARY; }
{TIME} { line = Integer.toString(yyline+1); return TIME; }
{TIMESTAMP} { line = Integer.toString(yyline+1); return TIMESTAMP; }
{TIMEZONE_HOUR} { line = Integer.toString(yyline+1); return TIMEZONE_HOUR; }
{TIMEZONE_MINUTE} { line = Integer.toString(yyline+1); return TIMEZONE_MINUTE; }
{TRAILING} { line = Integer.toString(yyline+1); return TRAILING; }
{TRANSLATE} { line = Integer.toString(yyline+1); return TRANSLATE; }
{TRANSLATION} { line = Integer.toString(yyline+1); return TRANSLATION; }
{TRIM} { line = Integer.toString(yyline+1); return TRIM; }
{TRUE} { line = Integer.toString(yyline+1); return TRUE; }
{UNKNOWN} { line = Integer.toString(yyline+1); return UNKNOWN; }
{UPPER} { line = Integer.toString(yyline+1); return UPPER; }
{USAGE} { line = Integer.toString(yyline+1); return USAGE; }
{USING} { line = Integer.toString(yyline+1); return USING; }
{VALUE} { line = Integer.toString(yyline+1); return VALUE; }
{VARCHAR} { line = Integer.toString(yyline+1); return VARCHAR; }
{WHENEVER} { line = Integer.toString(yyline+1); return WHENEVER; }
{WORK} { line = Integer.toString(yyline+1); return WORK; }
{WRITE} { line = Integer.toString(yyline+1); return WRITE; }
{YEAR} { line = Integer.toString(yyline+1); return YEAR; }
{ZONE} { line = Integer.toString(yyline+1); return ZONE; }
{LOGIN} { line = Integer.toString(yyline+1); return LOGIN; }
    "+" { line = Integer.toString(yyline+1); return MAS;}
    "-" { line = Integer.toString(yyline+1); return MENOS;}
    "*" { line = Integer.toString(yyline+1); return ASTERISCO;}
    "/" { line = Integer.toString(yyline+1); return DIV;}
    "%" { line = Integer.toString(yyline+1); return PORCENTAJE;}
    "<" { line = Integer.toString(yyline+1); return MENOR;}
    "<=" { line = Integer.toString(yyline+1); return MENORIGUAL;}
    ">" { line = Integer.toString(yyline+1); return MAYOR;}
    ">=" { line = Integer.toString(yyline+1); return MAYORIGUAL;}
    "=" { line = Integer.toString(yyline+1); return IGUAL;}
    "==" { line = Integer.toString(yyline+1); return IGUALIGUAL;}
    "!=" { line = Integer.toString(yyline+1); return NOIGUAL;}
    "&&" { line = Integer.toString(yyline+1); return AND;}
    "||" { line = Integer.toString(yyline+1); return OR;}
    "!" { line = Integer.toString(yyline+1); return ADMIRACION;}
    ";" { line = Integer.toString(yyline+1); return PUNTOCOMA;}
    "," { line = Integer.toString(yyline+1); return COMMA;}
    "." { line = Integer.toString(yyline+1); return PUNTO;}
    "[" { line = Integer.toString(yyline+1); return CORCHETEOP;}
    "]" { line = Integer.toString(yyline+1); return CORCHETECLO;}
    "(" { line = Integer.toString(yyline+1); return PARENTESISOP;}
    ")" { line = Integer.toString(yyline+1); return PARENTESISCLO;}
    "{" { line = Integer.toString(yyline+1); return LLAVEOP;}
    "}" { line = Integer.toString(yyline+1); return LLAVECLO;}
    "[]" { line = Integer.toString(yyline+1); return CORCHETEDOBLE;}
    "()" { line = Integer.toString(yyline+1); return PARENTESISDOBLE;}
    "{}" { line = Integer.toString(yyline+1); return LLAVEDOBLE;}
    "@" { line = Integer.toString(yyline+1); return ARROBA;}
    "#" { line = Integer.toString(yyline+1); return NUMERAL;}
    "##" { line = Integer.toString(yyline+1); return NUMERALDOBLE;}

[a-zA-Z][a-zA-Z0-9_]* {line = Integer.toString(yyline+1); return Identificador;} 

[ \t\r\n]+  { /*se ignoran los espacios*/}
{in} {  line = Integer.toString(yyline+1); return ComentarioE;}
{TC}|{EC} {/*se ignoran los comentario*/}

. { line = Integer.toString(yyline+1); return ERROR;}
